/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package org.sdase.ValidationClient

import io.securecodebox.persistence.defectdojo.config.DefectDojoConfig
import io.securecodebox.persistence.defectdojo.models.Finding
import io.securecodebox.persistence.defectdojo.service.EndpointService
import io.securecodebox.persistence.defectdojo.service.EngagementService
import io.securecodebox.persistence.defectdojo.service.FindingService
import io.securecodebox.persistence.defectdojo.service.ProductService;
import io.securecodebox.persistence.defectdojo.service.ProductTypeService;
import io.securecodebox.persistence.defectdojo.service.TestService
import java.text.DateFormat
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import io.securecodebox.persistence.defectdojo.config.DefectDojoConfig
import io.securecodebox.persistence.defectdojo.models.Engagement
import io.securecodebox.persistence.defectdojo.models.Finding
import io.securecodebox.persistence.defectdojo.models.Product
import io.securecodebox.persistence.defectdojo.models.ProductType
import io.securecodebox.persistence.defectdojo.models.ScanFile
import io.securecodebox.persistence.defectdojo.models.Test
import io.securecodebox.persistence.defectdojo.models.TestType
import io.securecodebox.persistence.defectdojo.models.User
import io.securecodebox.persistence.defectdojo.models.DojoGroup
import io.securecodebox.persistence.defectdojo.models.ProductGroup

import io.securecodebox.persistence.defectdojo.service.EngagementService
import io.securecodebox.persistence.defectdojo.service.FindingService
import io.securecodebox.persistence.defectdojo.service.ImportScanService
import io.securecodebox.persistence.defectdojo.service.ProductService;
import io.securecodebox.persistence.defectdojo.service.ProductTypeService;
import io.securecodebox.persistence.defectdojo.service.TestService
import io.securecodebox.persistence.defectdojo.service.TestTypeService
import io.securecodebox.persistence.defectdojo.service.UserService
import io.securecodebox.persistence.defectdojo.service.DojoGroupService
import io.securecodebox.persistence.defectdojo.service.ProductGroupService
import io.securecodebox.persistence.defectdojo.ScanType

class UploadClient {
    static void main(Object args) {
        def conf = new DefectDojoConfig(args.dojoUrl, args.dojoToken, args.dojoUser, 200);
        def productTypeService = new ProductTypeService(conf);
        def productService = new ProductService(conf);
        def engagementService = new EngagementService(conf)
        def testService = new TestService(conf)
        def testTypeService = new TestTypeService(conf)
        def userService = new UserService(conf)
        def findingService = new FindingService(conf)
        def importScanService = new ImportScanService(conf)
        def dojoGroupService = new DojoGroupService(conf)
        def productGroupService = new ProductGroupService(conf)


        File file = new File(filePath)
        String fileContent = file.text
        def jsonSlurper = new JsonSlurper(fileContent)
        def expectedFindings = jsonSlurper.parseText()

        for(expectedFinding in expectedFindings) {
            println expectedFinding.productName
        }
        
        def product = productService.searchUnique(Product.builder().name(args.productName).build()).orElseThrow{
                    new Exception("Could not find product with name '" + args.productName + "' in DefectDojo API. DefectDojo might be running in an unsupported version.")
                };

        ScanType scanType;
        for(ScanType scanTypeMatch : ScanType.values()) {
            if(scanTypeMatch.getTestType() == args.scanType) {
                scanType = scanTypeMatch;
            }
        }

        TestType testType = testTypeService.searchUnique(TestType.builder().name(ScanType.STATIC_CHECK.getTestType()).build())
                .orElseThrow{
                    new Exception("Could not find test type '" + ScanType.STATIC_CHECK.getTestType() + "' in DefectDojo API. DefectDojo might be running in an unsupported version.")
                };
        
        
        Map<String, String> queryParamsTest = new HashMap<>();
        queryParamsTest.put("test_type", testType.getId())
        def tests = testService.search(queryParamsTest)

        for(Test test in tests)
        Map<String, String> queryParamsFinding = new HashMap<>();
        queryParamsFinding.put("test", test.getId());
        println("searching for findings in ${test.getId()}")
        findingService.search(queryParamsFinding).each {
            println "found finding ${it.id}"
        }



    }
}
